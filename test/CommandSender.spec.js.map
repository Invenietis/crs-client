{"version":3,"sources":["test/CommandSender.spec.ts"],"names":["FakeHubConnection","FakeHubConnection.constructor","FakeHubConnection.createHubProxy","FakeHubConnection.result","send"],"mappings":"AAAA,iDAAiD;AACjD,yBAA6C,iBAAiB,CAAC,CAAA;AAC/D,+BAA6B,uBAAuB,CAAC,CAAA;AACrD,wBAAsB,gBAAgB,CAAC,CAAA;AACvC,4BAA0B,8BAA8B,CAAC,CAAA;AACzD,gCAA8B,kCAAkC,CAAC,CAAA;AACjE,6BAA2B,+BAA+B,CAAC,CAAA;AAG3D;IAAAA;QACMC,sEAAsEA;QACxEA,YAAOA,GAAGA,EAACA,SAASA,EAACA;gBACjBA,MAAMA,EAAEA;oBACJA,sBAAsBA,EAAEA,UAASA,IAASA,IAAE,CAAC;iBAChDA;aACJA,EAACA,CAACA;IAOPA,CAACA;IANGD,0CAAcA,GAAdA;IAEAE,CAACA;IACDF,kCAAMA,GAANA,UAAOA,IAAIA;QACPG,IAAIA,CAACA,OAAOA,CAACA,OAAOA,CAACA,MAAMA,CAACA,sBAAsBA,CAACA,IAAIA,CAACA,CAACA;IAC7DA,CAACA;IACLH,wBAACA;AAADA,CAbA,AAaCA,IAAA;AAED,QAAQ,CAAC,4BAA4B,EAAE;IACnC,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;IACtB,IAAI,YAAY,GAAG,IAAI,2BAAY,EAAE,CAAC;IACtC,IAAI,GAAG,GAAG,IAAI,iBAAiB,EAAE,CAAC;IAClC,IAAI,KAAK,GAAG,wBAAa,CAAC,YAAY,CAAC;IACvC,IAAI,YAAY,GAAG;QACf,IAAI,EAAE;YACF,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;gBAC/B,OAAO,CAAC;oBACJ,OAAO,EAAE,EAAE;iBACd,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC;KACJ,CAAC;IAEF,IAAI,aAAa,GAAG,IAAI,+BAAc,CAAC,IAAI,EAAE;QACzC,IAAI,YAAC,GAAW,EAAE,OAAgB;YAC9BI,MAAMA,CAACA,IAAIA,OAAOA,CAAMA,UAASA,OAAOA,EAAEA,MAAMA;gBAC5C,yBAAyB;gBACzB,IAAI,IAAI,GAAG;oBACH,WAAW,EAAE,OAAO,CAAC,IAAI;oBACzB,SAAS,EAAE,MAAM;oBACjB,OAAO,EAAE,MAAM;oBACf,YAAY,EAAE,KAAK,CAAC,YAAY;iBACnC,CAAC;gBAEN,IAAI,IAAI,GAAG,IAAI,0BAAe,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBAC9C,UAAU,CAAC;oBACP,OAAO,CAAC,IAAI,CAAC,CAAC;oBACf,EAAE,CAAA,CAAC,KAAK,IAAI,wBAAa,CAAC,WAAW,CAAC,CAAA,CAAC;wBACnC,UAAU,CAAC;4BACN,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;wBAC/B,CAAC,EAAC,CAAC,CAAC,CAAC;oBACT,CAAC;gBACJ,CAAC,EAAE,IAAI,CAAC,CAAC;YACb,CAAC,CAACA,CAACA;QACPA,CAACA;KACJ,EAAE,IAAI,yBAAW,CAAC,YAAY,EAAE,IAAI,iCAAe,CAAM,GAAG,EAAI,SAAS,CAAC,CAAC,EAAE,YAAY,CAAC,CAAE;IAE7F,EAAE,CAAC,4DAA4D,EAAE,UAAS,IAAI;QACzE,IAAI,OAAO,GAAG,IAAI,iBAAO,CAAE,gBAAgB,EAAE;YAC1C,eAAe,EAAE,sCAAsC;YACvD,oBAAoB,EAAE,sCAAsC;YAC5D,MAAM,EAAE,KAAK;SAChB,CAAC,CAAC;QAEH,IAAI,OAAO,GAAG,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC1C,OAAO,CAAC,IAAI,CAAC,UAAA,QAAQ;YACjB,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;YAC/B,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;YACvC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClD,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACxC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,wBAAa,CAAC,WAAW,CAAC,CAAC;YAC9D,IAAI,EAAE,CAAC;QACX,CAAC,CAAC,CAAC;QACH,UAAU,CAAC;YACP,GAAG,CAAC,MAAM,CAAC;gBACP,OAAO,EAAE;oBACL,aAAa,EAAE,IAAI;iBACtB;gBACD,SAAS,EAAE,MAAM;gBACjB,YAAY,EAAE,wBAAa,CAAC,WAAW;aAC1C,CAAC,CAAC;QACP,CAAC,EAAE,IAAI,CAAC,CAAC;IACb,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","file":"test/CommandSender.spec.js","sourcesContent":["/// <reference path=\"../../typings/index.d.ts\" />\r\nimport {CommandResponse, ResponseTypes} from '../src/Response';\r\nimport {CommandEmitter} from '../src/CommandEmitter';\r\nimport {Command} from '../src/Command';\r\nimport {HubListener} from '../src/listeners/HubListener';\r\nimport {SignalRListener} from '../src/listeners/SignalRListener';\r\nimport {HttpListener} from '../src/listeners/HttpListener';\r\nimport { MetaProvider, HttpMetaProvider } from '../src/MetaProvider'\r\n\r\nclass FakeHubConnection  {\r\n      //(url?: string, queryString?: any, logging?: boolean): HubConnection;\r\n    proxies = {'default':{\r\n        client: {\r\n            ReceiveCommandResponse: function(data: any){}\r\n        }\r\n    }};\r\n    createHubProxy(){\r\n        \r\n    }\r\n    result(data){\r\n        this.proxies.default.client.ReceiveCommandResponse(data);\r\n    }\r\n}\r\n\r\ndescribe(\"Command Emitter Send Tests\", function() {\r\n    var date = new Date();\r\n    var httpListener = new HttpListener();\r\n    var hub = new FakeHubConnection();\r\n    var rTYpe = ResponseTypes.Asynchronous;\r\n    var metaProvider = {\r\n        load: function(){\r\n            return new Promise((resolve, reject) => {\r\n                resolve({\r\n                    payload: {}\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    var commandSender = new CommandEmitter('/c', {\r\n        send(url: string, command: Command) {\r\n            return new Promise<any>(function(resolve, reject){\r\n                // Simulate async request\r\n                var data = {\r\n                        commandName: command.name,\r\n                        commandId: '1234',\r\n                        payload: '3712', \r\n                        responseType: rTYpe // Deferred \r\n                    };\r\n                    \r\n                var resp = new CommandResponse(data, command);\r\n                setTimeout(() => { \r\n                    resolve(resp);\r\n                   if(rTYpe == ResponseTypes.Synchronous){\r\n                       setTimeout(()=>{\r\n                            httpListener.notify(resp);\r\n                       },0);\r\n                   }\r\n                }, 1000);\r\n            });\r\n        }\r\n    }, new HubListener(httpListener, new SignalRListener(<any>hub  , 'default')), metaProvider) ;\r\n    \r\n    it(\"Send a command should trigger an Xhr request to the server\", function(done){\r\n         var command = new Command ('TransferAmount', {\r\n            sourceAccountId: '7A8125D3-2BF9-45DE-A258-CE0D3C17892D',\r\n            destinationAccountId: '37EC9EA1-2A13-4A4D-B55E-6C844D822DAC',\r\n            amount: '500'\r\n        });\r\n        \r\n        var promise = commandSender.emit(command);\r\n        promise.then(response => {\r\n            expect(response).toBeDefined(); \r\n            expect(response.payload).toBeDefined();\r\n            expect(response.payload.effectiveDate).toBe(date);\r\n            expect(response.commandId).toBe('1234');\r\n            expect(response.responseType).toBe(ResponseTypes.Synchronous);\r\n            done();\r\n        });\r\n        setTimeout(() =>{\r\n            hub.result({\r\n                payload: {\r\n                    effectiveDate: date\r\n                },\r\n                commandId: '1234',\r\n                responseType: ResponseTypes.Synchronous\r\n            });\r\n        }, 1100);\r\n    });\r\n});"],"sourceRoot":"/source/"}